"""
#pip install "fastapi[all]" uvicorn python-dotenv
Developer Toolbox FastAPI Server (v2.0 - Production Ready)
OpenAPI-compliant server for development automation tasks.
Refactored for statelessness, security, and robustness.
"""
from fastapi import FastAPI, HTTPException, Depends, Request
from pydantic import BaseModel, Field
from typing import Optional, List, Union, Dict
import os
import sys
import subprocess
import shutil
import logging
from datetime import datetime
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.openapi.utils import get_openapi
import uvicorn
from dotenv import load_dotenv

# ================================================
#                   Configuration
# ================================================

# Load environment variables from .env file
load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("dev_toolbox_server.log"), logging.StreamHandler()],
)

# --- Security Configuration ---
# Load the API key from an environment variable for security.
API_KEY = os.getenv("DEV_TOOLBOX_API_KEY")
if not API_KEY:
    logging.warning("CRITICAL: DEV_TOOLBOX_API_KEY environment variable not set. Server will not be secure.")
    # Fallback for local testing only. DO NOT use in production without setting the env var.
    API_KEY = "your_super_secret_api_key_here" 

# Load allowed origins for CORS. Default to allowing all if not set.
# For production, this should be a comma-separated list of your WebUI domains.
ALLOWED_ORIGINS_STR = os.getenv("ALLOWED_ORIGINS", "*")
ALLOWED_ORIGINS = [origin.strip() for origin in ALLOWED_ORIGINS_STR.split(',')]


# ================================================
#      Core Tools Class (Refactored & Stateless)
# ================================================

class DevTools:
    """
    Main tool implementation, refactored to be stateless.
    Each method is a pure function that receives all necessary context as parameters.
    """

    def run_command(self, command: Union[List[str], str], cwd: str, shell: bool = False) -> str:
        """
        Executes a shell command using subprocess and returns its standard output.
        Logs stdout on success or stderr on failure. `cwd` is a required argument.
        """
        logging.info(f"Running command: {' '.join(command) if isinstance(command, list) else command} in '{cwd}'")
        try:
            result = subprocess.run(
                command,
                shell=shell,
                capture_output=True,
                text=True,
                check=True,
                cwd=cwd
            )
            if result.stdout:
                logging.info(f"Command stdout:\n{result.stdout.strip()}")
            return result.stdout.strip()
        except FileNotFoundError:
            cmd_name = command[0] if isinstance(command, list) else str(command).split()[0]
            error_msg = f"Command not found: '{cmd_name}'. Ensure it's installed and in the system's PATH."
            logging.error(error_msg)
            raise RuntimeError(error_msg)
        except subprocess.CalledProcessError as e:
            error_detail = e.stderr or e.stdout or "Command failed with no specific error output."
            logging.error(f"Command failed: {e.cmd}\nReturn Code: {e.returncode}\nError: {error_detail.strip()}")
            raise RuntimeError(f"Command execution failed: {error_detail.strip()}")
        except Exception as e:
            logging.error(f"An unexpected error occurred running command {command}: {e}")
            raise RuntimeError(f"Unexpected error running command: {e}")

    def init_git_repo(self, base_dir: str, repo_name: str, commit_msg: str) -> Dict[str, str]:
        """Initialize a new Git repository. All parameters are explicit."""
        repo_path = os.path.join(base_dir, repo_name)
        logging.info(f"Initializing Git repository at: {repo_path}")
        os.makedirs(repo_path, exist_ok=True)

        readme_path = os.path.join(repo_path, "README.md")
        if not os.path.exists(readme_path):
            with open(readme_path, "w", encoding="utf-8") as f:
                f.write(f"# {repo_name}\nProject initialized on {datetime.now().isoformat()}\n")

        self.run_command(["git", "init"], cwd=repo_path)
        self.run_command(["git", "add", "README.md"], cwd=repo_path)

        try:
            self.run_command(["git", "commit", "-m", commit_msg], cwd=repo_path)
            logging.info(f"Git repository '{repo_name}' initialized successfully at {repo_path}.")
            return {"status": "success", "message": f"Git repository initialized at {repo_path}", "path": os.path.abspath(repo_path)}
        except RuntimeError as e:
            if "nothing to commit" in str(e).lower():
                logging.warning(f"Git init: Nothing new to commit in {repo_path}. Repo might already be initialized.")
                return {"status": "warning", "message": "Nothing new to commit. Repository may already be initialized.", "path": os.path.abspath(repo_path)}
            else:
                raise

    def setup_python_env(self, base_dir: str, requirements_file: str) -> Dict[str, str]:
        """Set up a Python virtual environment and install dependencies."""
        requirements_abs_path = os.path.join(base_dir, requirements_file)
        if not os.path.exists(requirements_abs_path):
            raise FileNotFoundError(f"Requirements file not found at: {requirements_abs_path}")

        venv_dir_name = "venv"
        venv_path = os.path.join(base_dir, venv_dir_name)
        logging.info(f"Setting up Python venv in: {venv_path}")

        self.run_command([sys.executable, "-m", "venv", venv_dir_name], cwd=base_dir)
        pip_executable = os.path.join(venv_path, "Scripts" if os.name == "nt" else "bin", "pip")

        logging.info(f"Installing requirements from {requirements_file} using {pip_executable}")
        self.run_command([pip_executable, "install", "-r", requirements_file], cwd=base_dir)

        logging.info(f"Python environment set up successfully in {venv_path}")
        return {"status": "success", "message": f"Python venv created at {venv_path} and dependencies installed.", "venv_path": os.path.abspath(venv_path)}

    def setup_node_env(self, base_dir: str, package_manager: str) -> Dict[str, str]:
        """Set up a Node.js environment by installing dependencies."""
        logging.info(f"Setting up Node environment in {base_dir} using: {package_manager}")
        cmd = [package_manager, "install"]
        use_shell = (os.name == 'nt') # npm/yarn often need shell=True on Windows

        self.run_command(cmd, cwd=base_dir, shell=use_shell)
        logging.info(f"Node environment setup complete using {package_manager}.")
        return {"status": "success", "message": f"Node dependencies installed using {package_manager}."}

    def lint_code(self, base_dir: str, linter_type: str, config_file: Optional[str]) -> Dict[str, str]:
        """Run a specified linter on the project."""
        logging.info(f"Running linter: {linter_type} in {base_dir}")
        use_shell = (os.name == 'nt')
        cmd: List[str] = []

        if linter_type == "eslint":
            cmd = ["npx", "eslint", "."]
            if config_file: cmd.extend(["--config", config_file])
        elif linter_type == "flake8":
            cmd = ["flake8", "."]
            if config_file: cmd.extend(["--config", config_file])
            use_shell = False # flake8 usually doesn't need shell
        
        output = self.run_command(cmd, cwd=base_dir, shell=use_shell)
        logging.info(f"Linter '{linter_type}' finished.")
        return {"status": "success", "message": f"Linter {linter_type} executed.", "output": output or "No linting issues found."}

    def format_code(self, base_dir: str, formatter_type: str) -> Dict[str, str]:
        """Format code in-place using the specified formatter."""
        logging.info(f"Running formatter: {formatter_type} in {base_dir}")
        use_shell = (os.name == 'nt')
        cmd: List[str] = []

        if formatter_type == "prettier":
            cmd = ["npx", "prettier", "--write", "."]
        elif formatter_type == "black":
            cmd = ["black", "."]
            use_shell = False

        output = self.run_command(cmd, cwd=base_dir, shell=use_shell)
        logging.info(f"Formatter '{formatter_type}' finished.")
        return {"status": "success", "message": f"Formatter {formatter_type} executed.", "output": output or "Formatting complete."}

    def backup_project(self, base_dir: str, destination_folder: str) -> Dict[str, str]:
        """Backup the project directory."""
        if not os.path.exists(base_dir):
            raise FileNotFoundError(f"Backup source directory not found: {base_dir}")
        
        os.makedirs(os.path.dirname(destination_folder), exist_ok=True)
        logging.info(f"Backing up '{base_dir}' to '{destination_folder}'...")
        
        ignore = shutil.ignore_patterns('venv', 'node_modules', '.git', '__pycache__', '*.pyc', '.DS_Store', 'backups*')
        shutil.copytree(base_dir, destination_folder, dirs_exist_ok=True, ignore=ignore)

        abs_dest = os.path.abspath(destination_folder)
        logging.info(f"Project successfully backed up to {abs_dest}")
        return {"status": "success", "message": f"Project backed up to {abs_dest}", "backup_path": abs_dest}

# ================================================
#            FastAPI App Initialization
# ================================================
app = FastAPI(
    title="Developer Toolbox API",
    description="A stateless, secure, and robust API for automating common development tasks.",
    version="2.0.0",
)

# --- Security: Basic Bearer Token ---
security = HTTPBearer()
async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """Validates the API Key provided in the Bearer token."""
    if credentials.scheme != "Bearer" or credentials.credentials != API_KEY:
        raise HTTPException(status_code=401, detail="Invalid or missing API key")
    return True

# --- CORS Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Singleton Tool Instance ---
# This is safe now because the class is stateless.
tools_instance = DevTools()

# ================================================
#               API Request Models
# ================================================
class GitInitRequest(BaseModel):
    base_dir: str = Field(default=".", description="Base directory to run the command from.")
    repo_name: str = Field(..., description="Name of the Git repository (directory to be created).")
    commit_msg: Optional[str] = Field(None, description="Custom initial commit message.")

class PythonEnvRequest(BaseModel):
    base_dir: str = Field(default=".", description="Base directory to run the command from.")
    requirements_file: str = Field(..., description="Path to requirements.txt, relative to base_dir.")

class NodeEnvRequest(BaseModel):
    base_dir: str = Field(default=".", description="Base directory to run the command from.")
    package_manager: str = Field(..., description="Node.js package manager ('npm' or 'yarn').")

class LintRequest(BaseModel):
    base_dir: str = Field(default=".", description="Base directory to run the command from.")
    linter_type: str = Field(..., description="Linter to use ('eslint' or 'flake8').")
    config_file: Optional[str] = Field(None, description="Path to linter config file.")

class FormatRequest(BaseModel):
    base_dir: str = Field(default=".", description="Base directory to run the command from.")
    formatter_type: str = Field(..., description="Formatter to use ('prettier' or 'black').")

class BackupRequest(BaseModel):
    base_dir: str = Field(default=".", description="The source directory to back up.")
    destination_folder: Optional[str] = Field(None, description="Specific destination folder. If None, a timestamped folder is created.")

# ================================================
#                   API Endpoints
# ================================================

@app.post("/actions/init_git_repo", summary="Initialize Git Repository", operation_id="init_git_repo")
async def api_init_git_repo(request: GitInitRequest, authorized: bool = Depends(get_current_user)):
    """Initializes a new Git repository, creates a README, and makes the first commit."""
    try:
        commit_msg = request.commit_msg or "Initial commit"
        os.makedirs(request.base_dir, exist_ok=True)
        result = tools_instance.init_git_repo(request.base_dir, request.repo_name, commit_msg)
        return result
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logging.error(f"Error in init_git_repo: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {e}")

@app.post("/actions/setup_python_env", summary="Setup Python Environment", operation_id="setup_python_env")
async def api_setup_python_env(request: PythonEnvRequest, authorized: bool = Depends(get_current_user)):
    """Creates a Python venv and installs dependencies from a requirements file."""
    try:
        os.makedirs(request.base_dir, exist_ok=True)
        result = tools_instance.setup_python_env(request.base_dir, request.requirements_file)
        return result
    except FileNotFoundError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logging.error(f"Error in setup_python_env: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {e}")

@app.post("/actions/setup_node_env", summary="Setup Node.js Environment", operation_id="setup_node_env")
async def api_setup_node_env(request: NodeEnvRequest, authorized: bool = Depends(get_current_user)):
    """Installs Node.js dependencies using npm or yarn."""
    if request.package_manager not in ["npm", "yarn"]:
        raise HTTPException(status_code=400, detail="Invalid package_manager. Must be 'npm' or 'yarn'.")
    try:
        os.makedirs(request.base_dir, exist_ok=True)
        result = tools_instance.setup_node_env(request.base_dir, request.package_manager)
        return result
    except Exception as e:
        logging.error(f"Error in setup_node_env: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {e}")

@app.post("/actions/lint_code", summary="Lint Source Code", operation_id="lint_code")
async def api_lint_code(request: LintRequest, authorized: bool = Depends(get_current_user)):
    """Runs a code linter (eslint or flake8) on a directory."""
    if request.linter_type not in ["eslint", "flake8"]:
        raise HTTPException(status_code=400, detail="Invalid linter_type. Must be 'eslint' or 'flake8'.")
    try:
        result = tools_instance.lint_code(request.base_dir, request.linter_type, request.config_file)
        return result
    except RuntimeError as e:
        # Linters often exit with non-zero codes for issues found, which is not a server error.
        # We return a 200 OK but include the linter's findings in the response.
        return {"status": "issues_found", "message": "Linter found issues.", "output": str(e)}
    except Exception as e:
        logging.error(f"Error in lint_code: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {e}")

@app.post("/actions/format_code", summary="Format Source Code", operation_id="format_code")
async def api_format_code(request: FormatRequest, authorized: bool = Depends(get_current_user)):
    """Formats code in-place using Prettier or Black."""
    if request.formatter_type not in ["prettier", "black"]:
        raise HTTPException(status_code=400, detail="Invalid formatter_type. Must be 'prettier' or 'black'.")
    try:
        result = tools_instance.format_code(request.base_dir, request.formatter_type)
        return result
    except Exception as e:
        logging.error(f"Error in format_code: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {e}")

@app.post("/actions/backup_project", summary="Backup Project Directory", operation_id="backup_project")
async def api_backup_project(request: BackupRequest, authorized: bool = Depends(get_current_user)):
    """Creates a compressed backup of a project directory."""
    try:
        # If no destination is specified, create a default timestamped one.
        dest = request.destination_folder
        if not dest:
            backup_root = "./backups"
            os.makedirs(backup_root, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            project_name = os.path.basename(os.path.abspath(request.base_dir))
            dest = os.path.join(backup_root, f"backup_{project_name}_{timestamp}")

        result = tools_instance.backup_project(request.base_dir, dest)
        return result
    except FileNotFoundError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logging.error(f"Error in backup_project: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {e}")

# ================================================
#                   OpenAPI Customization
# ================================================
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    
    openapi_schema["info"]["x-openwebui"] = {
        "name": "Developer Toolbox",
        "icon": "https://raw.githubusercontent.com/devicons/devicon/master/icons/devicon/devicon-original.svg",
        "description": "A suite of tools to automate common development tasks like Git repos, virtual environments, and code quality checks.",
        "category": "Development",
    }
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# ================================================
#                   Main Execution
# ================================================
if __name__ == "__main__":
    print("Starting Developer Toolbox API Server...")
    if API_KEY == "your_super_secret_api_key_here":
        print("\nWARNING: Running with a default, insecure API key.")
        print("         Please set the DEV_TOOLBOX_API_KEY environment variable for production use.\n")
    
    print(f"CORS is configured to allow origins: {ALLOWED_ORIGINS}")
    print("Available endpoints:")
    for route in app.routes:
        if hasattr(route, "path") and route.path.startswith('/actions'):
            print(f"  - {list(route.methods)} {route.path} (operation_id: {route.operation_id})")

    uvicorn.run(app, host="0.0.0.0", port=6700, log_level="info")